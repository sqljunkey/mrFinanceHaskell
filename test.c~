#include <stdio.h>
#include <curl/curl.h>
#include <stdlib.h>
#include <sys/time.h>
#include <stdint.h>
#include <stdio.h>
#include <regex.h>
#include <string.h>

#define ARRAY_SIZE(arr) (sizeof((arr)) / sizeof((arr)[0]))
const char * re = "183.77";

char* fwriteToString(const void* data, size_t size) {
    // Allocate memory for the buffer
    char* buffer = (char*)malloc(size + 1); // +1 for null terminator
    if (buffer == NULL) {
        fprintf(stderr, "Memory allocation failed.\n");
        return NULL;
    }

    // Open a memory stream for writing
    FILE* stream = open_memstream(&buffer, &size);
    if (stream == NULL) {
        fprintf(stderr, "Failed to open memory stream.\n");
        free(buffer);
        return NULL;
    }

    // Write data to the memory stream
    size_t written = fwrite(data, size, 1, stream);
    fclose(stream);

    // Null-terminate the buffer
    buffer[size] = '\0';

    return buffer;
}




char* concat(const char *s1, const char *s2)
{
    char *result = malloc(strlen(s1) + strlen(s2) + 1); // +1 for the null-terminator
    // in real code you would check for errors in malloc here
    strcpy(result, s1);
    strcat(result, s2);
    return result;
}

char* matchRegex(char *str, const char *pattern) {
    regex_t regex;
    regmatch_t match[2]; // for the full match and subexpression match
    int reti;
    char *result = NULL;

    // Compile the regular expression
    reti = regcomp(&regex, pattern, REG_EXTENDED);
    if (reti != 0) {
        fprintf(stderr, "Could not compile regex\n");
        return NULL;
    }

    // Execute the regular expression
    reti = regexec(&regex, str, 2, match, 0);
    if (reti == 0) {
        // If the regex matches, extract the matched substring
        int start = match[1].rm_so;
        int end = match[1].rm_eo;
        if (start >= 0 && end >= 0) {
            int len = end - start;
            result = (char*)malloc(len + 1);
            if (result != NULL) {
                strncpy(result, str + start, len);
                result[len] = '\0';
            }
        }
    } else if (reti == REG_NOMATCH) {
        // No match
        fprintf(stderr, "No match found\n");
    } else {
        // Error
        char error_buffer[100];
        regerror(reti, &regex, error_buffer, sizeof(error_buffer));
        fprintf(stderr, "Regex match failed: %s\n", error_buffer);
    }

    // Free the compiled regular expression
    regfree(&regex);

    return result;
}

/*
int find_match(const char *str, size_t total_size)
{
   
     char *s = str;
    regex_t     regex;
    
    // initialize pmatch containter for caching match offest and length
    regmatch_t  pmatch[3];
    
    // initialize offset and length types
    regoff_t    off, len;
    
    // exit if regular expression cant be compiled
    if (regcomp(&regex, re, REG_EXTENDED))
        return -1;

    printf("String = \"%s\"\n", str);
    printf("Matches:\n");
    
    // for each possible match
    for (int i = 0; ; i++) {
        
        // exit if no more matches
        if (regexec(&regex, s, ARRAY_SIZE(pmatch), pmatch, 0)){
            printf("\nend of file\n");
            break;
        }
        
        // compute offset of match and length of match and print
        off = pmatch[0].rm_so + (s - str);
        len = pmatch[0].rm_eo - pmatch[0].rm_so;
        printf("#%d:\n", i);
        printf("offset = %jd; length = %jd\n", (intmax_t) off, (intmax_t) len);
        


        // print the match
        printf("substring = \"%.*s\"\n", len, s + pmatch[1].rm_so);
        
        // move the pointer to the next start of the string
        s += pmatch[0].rm_eo;
    }
    
    return 0;
}

*/
// Callback function to process the received data
size_t write_callback(void *contents, size_t size, size_t nmemb, void *userp) {
    size_t total_size = size * nmemb;
    // Define the maximum size you want to print
    size_t max_print_size = 10024; // Adjust this to your desired size

    // Check if the received data exceeds the maximum size
    if (total_size > max_print_size) {
        // Process only up to the maximum size
        total_size = max_print_size;
    }

    // Print the processed data to stdout
   // fwrite(contents, 1, total_size, stdout);
    char * str = fwriteToString(contents, total_size);
    matchRegex(str, re);
    

    return (size * nmemb);
}

int main(int argc, char *argv[]) {

  printf("Usage: <linux_finance aapl>\n");
  if(argc < 2){

    printf("Usage: <linux_finance aapl>\n");
    
    return 0;
  }

  

    char * url = concat( "https://finance.yahoo.com/quote/" , argv[1]); 
	
    struct timeval stop, start;
    gettimeofday(&start, NULL);

    CURL *curl;
    CURLcode res;

    curl_global_init(CURL_GLOBAL_ALL);
    curl = curl_easy_init();

    printf("%s\n", url);

    if (curl) {

	curl_easy_setopt(curl, CURLOPT_ACCEPT_ENCODING, "");
        curl_easy_setopt(curl, CURLOPT_URL, url);
        curl_easy_setopt(curl, CURLOPT_USERAGENT, "Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/81.0");
        // Set the write callback function
        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);

        res = curl_easy_perform(curl);
        if (res != CURLE_OK)
            fprintf(stderr, "curl_easy_perform() failed: %s\n", curl_easy_strerror(res));

        curl_easy_cleanup(curl);
    }

     gettimeofday(&stop, NULL);
     printf("took %lu us\n", (stop.tv_sec - start.tv_sec) * 1000000 + stop.tv_usec - start.tv_usec); 

    free(url);
    curl_global_cleanup();
    return 0;
}


